// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test_2.Infrastructure;

#nullable disable

namespace Test_2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250610074201_SeedAuthorsData")]
    partial class SeedAuthorsData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsIdAuthor")
                        .HasColumnType("int");

                    b.Property<int>("BooksIdBook")
                        .HasColumnType("int");

                    b.HasKey("AuthorsIdAuthor", "BooksIdBook");

                    b.HasIndex("BooksIdBook");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksIdBook")
                        .HasColumnType("int");

                    b.Property<int>("GenresIdGenre")
                        .HasColumnType("int");

                    b.HasKey("BooksIdBook", "GenresIdGenre");

                    b.HasIndex("GenresIdGenre");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("Test_2.Core.Models.Author", b =>
                {
                    b.Property<int>("IdAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuthor"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAuthor");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            IdAuthor = 1,
                            FirstName = "No",
                            LastName = "One"
                        });
                });

            modelBuilder.Entity("Test_2.Core.Models.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBook"));

                    b.Property<int>("IdPublishingHouse")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdBook");

                    b.HasIndex("IdPublishingHouse");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Test_2.Core.Models.Genre", b =>
                {
                    b.Property<int>("IdGenre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGenre"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdGenre");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Test_2.Core.Models.PublishingHouse", b =>
                {
                    b.Property<int>("IdPublishingHouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPublishingHouse"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPublishingHouse");

                    b.ToTable("PublishingHouses");

                    b.HasData(
                        new
                        {
                            IdPublishingHouse = 1,
                            City = "New York",
                            Country = "USA",
                            Name = "Meow"
                        },
                        new
                        {
                            IdPublishingHouse = 2,
                            City = "Moscow",
                            Country = "Russia",
                            Name = "Meow2"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("Test_2.Core.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsIdAuthor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_2.Core.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksIdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("Test_2.Core.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksIdBook")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_2.Core.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresIdGenre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test_2.Core.Models.Book", b =>
                {
                    b.HasOne("Test_2.Core.Models.PublishingHouse", "PublishingHouse")
                        .WithMany("Books")
                        .HasForeignKey("IdPublishingHouse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublishingHouse");
                });

            modelBuilder.Entity("Test_2.Core.Models.PublishingHouse", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
