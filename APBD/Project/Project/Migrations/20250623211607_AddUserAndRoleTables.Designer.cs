// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Infrastructure;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250623211607_AddUserAndRoleTables")]
    partial class AddUserAndRoleTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Core.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Address = "Ul. Krakowska 15, 00-001 Warszawa",
                            Email = "jan.kowalski@email.com",
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            ClientId = 2,
                            Address = "Ul. Marszałkowska 100, 00-026 Warszawa",
                            Email = "kontakt@techcorp.pl",
                            PhoneNumber = "987654321"
                        },
                        new
                        {
                            ClientId = 3,
                            Address = "Ul. Nowy Świat 25, 00-029 Warszawa",
                            Email = "anna.nowak@gmail.com",
                            PhoneNumber = "555123456"
                        },
                        new
                        {
                            ClientId = 4,
                            Address = "Ul. Piękna 50, 00-672 Warszawa",
                            Email = "info@innovate.com.pl",
                            PhoneNumber = "111222333"
                        },
                        new
                        {
                            ClientId = 5,
                            Address = "Ul. Mokotowska 12, 00-640 Warszawa",
                            Email = "piotr.wisniewski@outlook.com",
                            PhoneNumber = "444555666"
                        });
                });

            modelBuilder.Entity("Project.Core.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Krs")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CompanyId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            ClientId = 2,
                            Krs = "0000123456",
                            Name = "TechCorp Sp. z o.o."
                        },
                        new
                        {
                            CompanyId = 2,
                            ClientId = 4,
                            Krs = "0000987654",
                            Name = "Innovate Solutions"
                        });
                });

            modelBuilder.Entity("Project.Core.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.Property<string>("SoftwareVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SupportYears")
                        .HasColumnType("int");

                    b.Property<string>("UpdatesInformation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ContractId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Project.Core.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DiscountTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PercentageValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("DiscountId");

                    b.HasIndex("DiscountTypeId");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            DiscountId = 1,
                            Description = "Special discount for new year contracts",
                            DiscountTypeId = 1,
                            EndDate = new DateOnly(2025, 3, 31),
                            Name = "New Year 2025",
                            PercentageValue = 15.00m,
                            StartDate = new DateOnly(2025, 1, 1)
                        },
                        new
                        {
                            DiscountId = 2,
                            Description = "Discount for large volume purchases",
                            DiscountTypeId = 1,
                            EndDate = new DateOnly(2025, 12, 31),
                            Name = "Enterprise Package",
                            PercentageValue = 25.00m,
                            StartDate = new DateOnly(2025, 1, 1)
                        },
                        new
                        {
                            DiscountId = 3,
                            Description = "Loyalty discount for existing clients",
                            DiscountTypeId = 1,
                            EndDate = new DateOnly(2025, 12, 31),
                            Name = "Returning Customer",
                            PercentageValue = 10.00m,
                            StartDate = new DateOnly(2025, 1, 1)
                        },
                        new
                        {
                            DiscountId = 4,
                            Description = "Summer promotional discount",
                            DiscountTypeId = 1,
                            EndDate = new DateOnly(2025, 8, 31),
                            Name = "Summer Sale",
                            PercentageValue = 20.00m,
                            StartDate = new DateOnly(2025, 6, 1)
                        },
                        new
                        {
                            DiscountId = 5,
                            Description = "Educational institution discount",
                            DiscountTypeId = 2,
                            EndDate = new DateOnly(2025, 12, 31),
                            Name = "Student Special",
                            PercentageValue = 30.00m,
                            StartDate = new DateOnly(2025, 1, 1)
                        });
                });

            modelBuilder.Entity("Project.Core.Models.DiscountType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("DiscountTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Name = "Upfront"
                        },
                        new
                        {
                            TypeId = 2,
                            Name = "Subscription"
                        });
                });

            modelBuilder.Entity("Project.Core.Models.Individual", b =>
                {
                    b.Property<int>("IndividualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndividualId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("IndividualId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Individuals");

                    b.HasData(
                        new
                        {
                            IndividualId = 1,
                            ClientId = 1,
                            FirstName = "Jan",
                            IsDeleted = false,
                            LastName = "Kowalski",
                            Pesel = "85010112345"
                        },
                        new
                        {
                            IndividualId = 2,
                            ClientId = 3,
                            FirstName = "Anna",
                            IsDeleted = false,
                            LastName = "Nowak",
                            Pesel = "90052298765"
                        },
                        new
                        {
                            IndividualId = 3,
                            ClientId = 5,
                            FirstName = "Piotr",
                            IsDeleted = false,
                            LastName = "Wiśniewski",
                            Pesel = "78121545678"
                        });
                });

            modelBuilder.Entity("Project.Core.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PaymentId");

                    b.HasIndex("ContractId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Project.Core.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Project.Core.Models.Software", b =>
                {
                    b.Property<int>("SoftwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftwareId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("SubscriptionCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UpfrontCostPerYear")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SoftwareId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Softwares");

                    b.HasData(
                        new
                        {
                            SoftwareId = 1,
                            CategoryId = 1,
                            CurrentVersion = "3.2.1",
                            Description = "Complete business management solution",
                            Name = "BusinessPro",
                            SubscriptionCost = 150.00m,
                            UpfrontCostPerYear = 1200.00m
                        },
                        new
                        {
                            SoftwareId = 2,
                            CategoryId = 2,
                            CurrentVersion = "2.1.5",
                            Description = "Advanced accounting software",
                            Name = "AccounTech",
                            SubscriptionCost = 100.00m
                        },
                        new
                        {
                            SoftwareId = 3,
                            CategoryId = 3,
                            CurrentVersion = "4.0.2",
                            Description = "Customer relationship management system",
                            Name = "ClientConnect",
                            SubscriptionCost = 250.00m,
                            UpfrontCostPerYear = 2000.00m
                        },
                        new
                        {
                            SoftwareId = 4,
                            CategoryId = 4,
                            CurrentVersion = "1.8.3",
                            Description = "Project and task management platform",
                            Name = "TaskMaster",
                            SubscriptionCost = 75.00m,
                            UpfrontCostPerYear = 600.00m
                        },
                        new
                        {
                            SoftwareId = 5,
                            CategoryId = 5,
                            CurrentVersion = "5.1.0",
                            Description = "Enterprise security management suite",
                            Name = "SecureGuard",
                            SubscriptionCost = 400.00m,
                            UpfrontCostPerYear = 3000.00m
                        });
                });

            modelBuilder.Entity("Project.Core.Models.SoftwareCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("SoftwareCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Business Management"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Accounting"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "CRM"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Project Management"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Security"
                        });
                });

            modelBuilder.Entity("Project.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Project.Core.Models.Company", b =>
                {
                    b.HasOne("Project.Core.Models.Client", "Client")
                        .WithOne("Company")
                        .HasForeignKey("Project.Core.Models.Company", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Project.Core.Models.Contract", b =>
                {
                    b.HasOne("Project.Core.Models.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Core.Models.Software", "Software")
                        .WithMany("Contracts")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Project.Core.Models.Discount", b =>
                {
                    b.HasOne("Project.Core.Models.DiscountType", "DiscountType")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountType");
                });

            modelBuilder.Entity("Project.Core.Models.Individual", b =>
                {
                    b.HasOne("Project.Core.Models.Client", "Client")
                        .WithOne("Individual")
                        .HasForeignKey("Project.Core.Models.Individual", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Project.Core.Models.Payment", b =>
                {
                    b.HasOne("Project.Core.Models.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Project.Core.Models.Software", b =>
                {
                    b.HasOne("Project.Core.Models.SoftwareCategory", "Category")
                        .WithMany("Softwares")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Project.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Core.Models.Client", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("Contracts");

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Project.Core.Models.Contract", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Project.Core.Models.DiscountType", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("Project.Core.Models.Software", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Project.Core.Models.SoftwareCategory", b =>
                {
                    b.Navigation("Softwares");
                });
#pragma warning restore 612, 618
        }
    }
}
